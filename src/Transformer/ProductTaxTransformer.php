<?php

declare(strict_types=1);

namespace Strix\Ergonode\Transformer;

use Shopware\Core\Framework\Context;
use Shopware\Core\Framework\DataAbstractionLayer\EntityRepositoryInterface;
use Shopware\Core\System\Tax\TaxDefinition;
use Strix\Ergonode\DTO\ProductTransformationDTO;
use Strix\Ergonode\Provider\TaxProvider;

class ProductTaxTransformer implements ProductDataTransformerInterface
{
    private const AUTOGENERATED_TAX_NAME = 'Ergonode Autogenerated (%1$.0f%%)';

    private TaxProvider $taxProvider;

    private EntityRepositoryInterface $taxRepository;

    public function __construct(TaxProvider $taxProvider, EntityRepositoryInterface $taxRepository)
    {
        $this->taxProvider = $taxProvider;
        $this->taxRepository = $taxRepository;
    }

    public function transform(ProductTransformationDTO $productData, Context $context): ProductTransformationDTO
    {
        $swData = $productData->getShopwareData();
        $productTaxRate = $swData['tax']['rate'] ?? null;

        if (null === $productTaxRate) {
            throw new \RuntimeException('Missing tax.rate from product data');
        }

        $taxEntity = $this->taxProvider->getByTaxRate($productTaxRate, $context);

        if (null !== $taxEntity) {
            $taxId = $taxEntity->getId();
        } else {
            $taxId = $this->taxRepository->create(
                [
                    [
                        'taxRate' => $productTaxRate,
                        'name' => \sprintf(self::AUTOGENERATED_TAX_NAME, $productTaxRate)
                    ]
                ],
                $context
            )->getPrimaryKeys(TaxDefinition::ENTITY_NAME)[0];
        }

        $swData['taxId'] = $taxId;
        unset($swData['tax']);

        $productData->setShopwareData($swData);

        return $productData;
    }
}