imports:
  - { resource: packages/cache.yml }
services:
  _defaults:
    autowire: true
    autoconfigure: true

  _instanceof:
    # EXTENSION
    Strix\Ergonode\Extension\AbstractErgonodeMappingExtension:
      tags: [ 'shopware.entity.extension' ]

  # WIRE WHOLE NAMESPACE
  Strix\Ergonode\:
    resource: '../../'

  # API
  Strix\Ergonode\Api\Client\ErgonodeGqlClient:
    factory: [ '@Strix\Ergonode\Api\Client\ErgonodeGqlClientFactory', 'createFromPluginConfig' ]

  Strix\Ergonode\Api\Client\ErgonodeGqlClientFactory:

  # CONTROLLER
  Strix\Ergonode\Modules\Attribute\Controller\AttributeMappingController:
    tags: [ 'controller.service_arguments' ]

  # COMMAND
  Strix\Ergonode\Modules\Attribute\Command\CreateAttributeMappingCommand:
    arguments:
      $repository: '@strix_ergonode_attribute_mapping.repository'

  # ENTITY DEFINITION
  Strix\Ergonode\Modules\Attribute\Entity\ErgonodeAttributeMapping\ErgonodeAttributeMappingDefinition:
    tags: [ 'shopware.entity.definition' ]

  Strix\Ergonode\Entity\ErgonodeMappingExtension\ErgonodeMappingExtensionEntityDefinition:
    tags: [ 'shopware.entity.definition' ]

  # PROVIDER
  Strix\Ergonode\Modules\Attribute\Provider\AttributeMappingProvider:
    arguments:
      $repository: '@strix_ergonode_attribute_mapping.repository'

  # RESOLVER
  Strix\Ergonode\Resolver\NodeTransformerResolver:
    arguments:
      - !tagged_iterator { tag: 'strix_ergonode.node_transformer' }

  # SUBSCRIBER
  Strix\Ergonode\Subscriber\Subscriber:
    tags: [ 'kernel.event_subscriber' ]